{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///home/nvadmin/Desktop/ai-vws-sizing-tool/frontend/src/app/api/test-configuration/route.ts"],"sourcesContent":["/**\n * Test Configuration API Route\n * \n * This route tests a recommended vGPU configuration on a VM by:\n * 1. SSH into the VM\n * 2. Running a lightweight test container/workload\n * 3. Monitoring GPU/compute usage\n * 4. Reporting if the configuration is viable\n */\n\nimport { NextRequest, NextResponse } from \"next/server\";\n\nexport const maxDuration = 600; // 10 minutes for testing\nexport const dynamic = 'force-dynamic';\n\ninterface TestConfigurationRequest {\n  vm_ip: string;\n  username: string;\n  password: string;\n  ssh_port?: number;\n  hf_token?: string;\n  model_tag?: string;\n  configuration: {\n    vgpu_profile: string;\n    gpu_memory_size?: number;\n    max_kv_tokens?: number;\n    vcpu_count?: number;\n    system_RAM?: number;\n    model_tag?: string;\n  };\n  test_duration_seconds?: number;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: TestConfigurationRequest = await request.json();\n    \n    console.log(\"ðŸ§ª Received test-configuration request:\", {\n      vm_ip: body.vm_ip,\n      username: body.username,\n      vgpu_profile: body.configuration?.vgpu_profile\n    });\n\n    const {\n      vm_ip,\n      username,\n      password,\n      ssh_port = 22,\n      hf_token,\n      configuration,\n      test_duration_seconds = 30\n    } = body;\n\n    if (!vm_ip) {\n      return NextResponse.json(\n        { error: \"vm_ip is required\" },\n        { status: 400 }\n      );\n    }\n\n    if (!username || !password) {\n      return NextResponse.json(\n        { error: \"username and password are required\" },\n        { status: 400 }\n      );\n    }\n\n    if (!configuration?.vgpu_profile) {\n      return NextResponse.json(\n        { error: \"configuration.vgpu_profile is required\" },\n        { status: 400 }\n      );\n    }\n\n    const model_tag = body.model_tag || configuration.model_tag || 'meta-llama/Llama-3.2-1B';\n\n    // Forward to Python backend for SSH-based testing\n    const backendUrl = process.env.BACKEND_URL || 'http://localhost:8081';\n    const backendResponse = await fetch(`${backendUrl}/test-configuration`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        vm_ip,\n        ssh_port,\n        username,\n        password,\n        hf_token,\n        model_tag,\n        configuration,\n        test_duration_seconds\n      }),\n    });\n\n    if (!backendResponse.ok) {\n      const errorData = await backendResponse.json().catch(() => ({ error: 'Unknown error' }));\n      return NextResponse.json(\n        { error: errorData.error || `Backend returned status ${backendResponse.status}` },\n        { status: backendResponse.status }\n      );\n    }\n\n    // Stream the response from backend to frontend\n    return new Response(backendResponse.body, {\n      headers: {\n        \"Content-Type\": \"text/event-stream\",\n        \"Cache-Control\": \"no-cache\",\n        \"Connection\": \"keep-alive\",\n      },\n    });\n\n  } catch (error: any) {\n    console.error(\"Error in test-configuration route:\", error);\n    return NextResponse.json(\n      { error: error.message || \"Failed to process request\" },\n      { status: 500 }\n    );\n  }\n}\n\n"],"names":[],"mappings":"AAAA;;;;;;;;CAQC;;;;;AAED;;AAEO,MAAM,cAAc,KAAK,yBAAyB;AAClD,MAAM,UAAU;AAoBhB,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAiC,MAAM,QAAQ,IAAI;QAEzD,QAAQ,GAAG,CAAC,2CAA2C;YACrD,OAAO,KAAK,KAAK;YACjB,UAAU,KAAK,QAAQ;YACvB,cAAc,KAAK,aAAa,EAAE;QACpC;QAEA,MAAM,EACJ,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,WAAW,EAAE,EACb,QAAQ,EACR,aAAa,EACb,wBAAwB,EAAE,EAC3B,GAAG;QAEJ,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAoB,GAC7B;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,YAAY,CAAC,UAAU;YAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqC,GAC9C;gBAAE,QAAQ;YAAI;QAElB;QAEA,IAAI,CAAC,eAAe,cAAc;YAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAyC,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,KAAK,SAAS,IAAI,cAAc,SAAS,IAAI;QAE/D,kDAAkD;QAClD,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI;QAC9C,MAAM,kBAAkB,MAAM,MAAM,GAAG,WAAW,mBAAmB,CAAC,EAAE;YACtE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA;YACF;QACF;QAEA,IAAI,CAAC,gBAAgB,EAAE,EAAE;YACvB,MAAM,YAAY,MAAM,gBAAgB,IAAI,GAAG,KAAK,CAAC,IAAM,CAAC;oBAAE,OAAO;gBAAgB,CAAC;YACtF,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO,UAAU,KAAK,IAAI,CAAC,wBAAwB,EAAE,gBAAgB,MAAM,EAAE;YAAC,GAChF;gBAAE,QAAQ,gBAAgB,MAAM;YAAC;QAErC;QAEA,+CAA+C;QAC/C,OAAO,IAAI,SAAS,gBAAgB,IAAI,EAAE;YACxC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;gBACjB,cAAc;YAChB;QACF;IAEF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,sCAAsC;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO,MAAM,OAAO,IAAI;QAA4B,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}