#!/bin/bash

# Setup directories
export DEPLOY_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 ; pwd -P )"
export PROJECT_DIR="${DEPLOY_DIR}/.."

# Keys
if [ -f "$DEPLOY_DIR/.keys" ]; then
    source "$DEPLOY_DIR/.keys"
else
    echo " * ERROR: File './deploy/.keys' is untracked to prevent key leakage."
    echo " * Please create the file with the following lines: "
    echo " *   export NVIDIA_CLI_API_KEY=<key>"
fi

# Milvus mount
export MILVUS_STANDALONE_URI="localhost"
export MILVUS_DIR="$PROJECT_DIR/milvus"

# NOTE: Deployment scripts assume containers in `docker-compose.yaml` are deployed
#   locally, regardless of `FRONTEND_URI` or `CHAIN_SERVER_HOST`. This includes
#   `gnuradio`, `sdr`, `chain-server`, and `frontend`. For non-local deployment of
#   these services, you must manually handle deployment configuration or adjust
#   the scripts accordingly.

# For GNURadio
export MY_UID=$(id -u)
export GNU_GRC_FILE="grc_files/fm_radio.grc"
export GNU_USE_GUI=0

# Software defined radio (SDR)
export SDR_GPU=0

# Frontend and chain server
export FRONTEND_URI="localhost:6001"
export FRONTEND_SERVER_PORT="8090"
export CHAIN_SERVER_HOST="0.0.0.0"
export CHAIN_SERVER_PORT="8081"

# ASR NIM configuration
# Note: ASR is the only NIM that is *required*. All other NIMs will fallback to
# using the API endpoints at https://build.nvidia.com if the model or URL is empty.
export ASR_MODEL="nvidia/parakeet-ctc-1.1b-asr"
export ASR_VERSION="1.0.0"
export ASR_URL="0.0.0.0"
export ASR_PORT=50051
export ASR_GPU=0

# LLM deployment. If LLM_URL is empty, `scripts/start.sh` will not deploy
# and the NIM will utilize the model endpoint at https://build.nvidia.com.
export LLM_MODEL="mistralai/mistral-7b-instruct-v0.3"
export LLM_VERSION="latest"
export LLM_URL=""
export LLM_PORT=8000
export LLM_GPU=1

# Reranking deployment. If RERANK_URL is empty, `scripts/start.sh` will not deploy
# and the NIM will utilize the model endpoint at https://build.nvidia.com.
export RERANK_MODEL="nvidia/nv-rerankqa-mistral-4b-v3"
export RERANK_VERSION="1.0.0"
export RERANK_URL=""
export RERANK_PORT=8001
export RERANK_GPU=0

# Embedding deployment. If EMBED_URL is empty, `scripts/start.sh` will not deploy
# and the NIM will utilize the model endpoint at https://build.nvidia.com.
export EMBED_MODEL="nvidia/nv-embedqa-e5-v5"
export EMBED_VERSION="1.0.1"
export EMBED_URL=""
export EMBED_PORT=8002
export EMBED_GPU=0

# Log levels [optional, default='WARN']
export SDR_LOG_LEVEL='INFO'
export FRONTEND_LOG_LEVEL='WARN'
export CHAIN_LOG_LEVEL='INFO'

# LLM chain settings
export DB_CHUNK_SIZE=512
export DB_CHUNK_OVERLAP=64
export MAX_DOCS_RETR=12

# File replay settings
#   If a replay file is provided, the 'file-replay' container will replay a
#   .wav audio file as I/Q FM samples transmitted over UDP in real-time, mimicking
#   the input from a radio.
export REPLAY_GPU=0
export REPLAY_FILE=""  # WAV file to replay. Should be located in file-replay/files.
# export SDR_IP="0.0.0.0"         # [optional] Check sdr-holoscan.params.network_rx.ip_addr
# export SDR_PORT=5005            # [optional] Check sdr-holoscan.params.network_rx.dst_port
# export SDR_MAX_PKT_SZ=1472      # [optional] Check sdr-holoscan.params.network_rx.max_payload_size
# export SDR_SAMPLE_RATE=1000000  # [optional] Check sdr-holoscan.params.sensor.sample_rate
# export REPLAY_TIME=0            # [optional] If non-zero, loops for REPLAY_TIME seconds