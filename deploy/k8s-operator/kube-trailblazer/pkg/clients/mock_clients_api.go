// Code generated by MockGen. DO NOT EDIT.
// Source: clients.go

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/openshift/api/config/v1"
	v10 "k8s.io/api/core/v1"
	v11 "k8s.io/apimachinery/pkg/apis/meta/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	rest "k8s.io/client-go/rest"
	client "sigs.k8s.io/controller-runtime/pkg/client"
	controllerutil "sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
)

// MockClientsInterface is a mock of ClientsInterface interface.
type MockClientsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientsInterfaceMockRecorder
}

// MockClientsInterfaceMockRecorder is the mock recorder for MockClientsInterface.
type MockClientsInterfaceMockRecorder struct {
	mock *MockClientsInterface
}

// NewMockClientsInterface creates a new mock instance.
func NewMockClientsInterface(ctrl *gomock.Controller) *MockClientsInterface {
	mock := &MockClientsInterface{ctrl: ctrl}
	mock.recorder = &MockClientsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientsInterface) EXPECT() *MockClientsInterfaceMockRecorder {
	return m.recorder
}

// ClusterVersionGet mocks base method.
func (m *MockClientsInterface) ClusterVersionGet(ctx context.Context, opts v11.GetOptions) (*v1.ClusterVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterVersionGet", ctx, opts)
	ret0, _ := ret[0].(*v1.ClusterVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ClusterVersionGet indicates an expected call of ClusterVersionGet.
func (mr *MockClientsInterfaceMockRecorder) ClusterVersionGet(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterVersionGet", reflect.TypeOf((*MockClientsInterface)(nil).ClusterVersionGet), ctx, opts)
}

// Create mocks base method.
func (m *MockClientsInterface) Create(ctx context.Context, obj client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockClientsInterfaceMockRecorder) Create(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClientsInterface)(nil).Create), ctx, obj)
}

// CreateOrUpdate mocks base method.
func (m *MockClientsInterface) CreateOrUpdate(ctx context.Context, obj client.Object, fn controllerutil.MutateFn) (controllerutil.OperationResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, obj, fn)
	ret0, _ := ret[0].(controllerutil.OperationResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockClientsInterfaceMockRecorder) CreateOrUpdate(ctx, obj, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockClientsInterface)(nil).CreateOrUpdate), ctx, obj, fn)
}

// Delete mocks base method.
func (m *MockClientsInterface) Delete(ctx context.Context, obj client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientsInterfaceMockRecorder) Delete(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientsInterface)(nil).Delete), ctx, obj)
}

// Get mocks base method.
func (m *MockClientsInterface) Get(ctx context.Context, key client.ObjectKey, obj client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockClientsInterfaceMockRecorder) Get(ctx, key, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientsInterface)(nil).Get), ctx, key, obj)
}

// GetNamespace mocks base method.
func (m *MockClientsInterface) GetNamespace(ctx context.Context, name string, opts v11.GetOptions) (*v10.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", ctx, name, opts)
	ret0, _ := ret[0].(*v10.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockClientsInterfaceMockRecorder) GetNamespace(ctx, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockClientsInterface)(nil).GetNamespace), ctx, name, opts)
}

// GetNodesByLabels mocks base method.
func (m *MockClientsInterface) GetNodesByLabels(ctx context.Context, matchingLabels map[string]string) (*v10.NodeList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesByLabels", ctx, matchingLabels)
	ret0, _ := ret[0].(*v10.NodeList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesByLabels indicates an expected call of GetNodesByLabels.
func (mr *MockClientsInterfaceMockRecorder) GetNodesByLabels(ctx, matchingLabels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByLabels", reflect.TypeOf((*MockClientsInterface)(nil).GetNodesByLabels), ctx, matchingLabels)
}

// GetPlatform mocks base method.
func (m *MockClientsInterface) GetPlatform() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatform")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatform indicates an expected call of GetPlatform.
func (mr *MockClientsInterfaceMockRecorder) GetPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatform", reflect.TypeOf((*MockClientsInterface)(nil).GetPlatform))
}

// GetPodLogs mocks base method.
func (m *MockClientsInterface) GetPodLogs(namespace, podName string, podLogOpts *v10.PodLogOptions) *rest.Request {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPodLogs", namespace, podName, podLogOpts)
	ret0, _ := ret[0].(*rest.Request)
	return ret0
}

// GetPodLogs indicates an expected call of GetPodLogs.
func (mr *MockClientsInterfaceMockRecorder) GetPodLogs(namespace, podName, podLogOpts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPodLogs", reflect.TypeOf((*MockClientsInterface)(nil).GetPodLogs), namespace, podName, podLogOpts)
}

// GetSecret mocks base method.
func (m *MockClientsInterface) GetSecret(ctx context.Context, namespace, name string, opts v11.GetOptions) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", ctx, namespace, name, opts)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockClientsInterfaceMockRecorder) GetSecret(ctx, namespace, name, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockClientsInterface)(nil).GetSecret), ctx, namespace, name, opts)
}

// HasResource mocks base method.
func (m *MockClientsInterface) HasResource(resource schema.GroupVersionResource) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasResource", resource)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasResource indicates an expected call of HasResource.
func (mr *MockClientsInterfaceMockRecorder) HasResource(resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasResource", reflect.TypeOf((*MockClientsInterface)(nil).HasResource), resource)
}

// Invalidate mocks base method.
func (m *MockClientsInterface) Invalidate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invalidate")
}

// Invalidate indicates an expected call of Invalidate.
func (mr *MockClientsInterfaceMockRecorder) Invalidate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invalidate", reflect.TypeOf((*MockClientsInterface)(nil).Invalidate))
}

// List mocks base method.
func (m *MockClientsInterface) List(ctx context.Context, obj client.ObjectList, opts ...client.ListOption) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, obj}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// List indicates an expected call of List.
func (mr *MockClientsInterfaceMockRecorder) List(ctx, obj interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, obj}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientsInterface)(nil).List), varargs...)
}

// ServerGroups mocks base method.
func (m *MockClientsInterface) ServerGroups() (*v11.APIGroupList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerGroups")
	ret0, _ := ret[0].(*v11.APIGroupList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerGroups indicates an expected call of ServerGroups.
func (mr *MockClientsInterfaceMockRecorder) ServerGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerGroups", reflect.TypeOf((*MockClientsInterface)(nil).ServerGroups))
}

// StatusUpdate mocks base method.
func (m *MockClientsInterface) StatusUpdate(ctx context.Context, obj client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusUpdate", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusUpdate indicates an expected call of StatusUpdate.
func (mr *MockClientsInterfaceMockRecorder) StatusUpdate(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusUpdate", reflect.TypeOf((*MockClientsInterface)(nil).StatusUpdate), ctx, obj)
}

// Update mocks base method.
func (m *MockClientsInterface) Update(ctx context.Context, obj client.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, obj)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientsInterfaceMockRecorder) Update(ctx, obj interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientsInterface)(nil).Update), ctx, obj)
}
