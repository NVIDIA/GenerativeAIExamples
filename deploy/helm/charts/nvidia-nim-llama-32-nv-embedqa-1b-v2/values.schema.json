{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "customCommand": {
            "type": "array",
            "description": "Overrides command line options sent to the NIM with the array listed here. ",
            "default": "[]",
            "items": {
                "type": "string"
            }
        },
        "customArgs": {
            "type": "array",
            "description": "Overrides command line arguments of the NIM container with the array listed here. ",
            "default": "[]",
            "items": {
                "type": "string"
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "repository": {
                    "type": "string",
                    "description": "NIM Image Repository",
                    "default": "\"\""
                },
                "tag": {
                    "type": "string",
                    "description": "Image tag or version",
                    "default": "\"\""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Image pull policy",
                    "default": "\"\""
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "runAsUser": {
                    "type": "number",
                    "description": "Specify user UID for pod.",
                    "default": 1000
                },
                "runAsGroup": {
                    "type": "number",
                    "description": "Specify group ID for pod.",
                    "default": 1000
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Specify file system owner group id.",
                    "default": 1000
                }
            }
        },
        "replicaCount": {
            "type": "number",
            "description": "Specify static replica count for deployment.",
            "default": 1
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a service account should be created.",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "Specifies the name of the service account to use. If it is not set and create is `true`, a name is generated using a `fullname` template.",
                    "default": ""
                }
            }
        },
        "statefulSet": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables `statefulset` deployment. Enabling `statefulSet` allows PVC templates for scaling. If using central PVC with RWX `accessMode`, this isn't needed.",
                    "default": false
                }
            }
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables horizontal pod autoscaler.",
                    "default": false
                },
                "minReplicas": {
                    "type": "number",
                    "description": "Specify minimum replicas for autoscaling.",
                    "default": 1
                },
                "maxReplicas": {
                    "type": "number",
                    "description": "Specify maximum replicas for autoscaling.",
                    "default": 10
                },
                "metrics": {
                    "type": "array",
                    "description": "Array of metrics for autoscaling.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables ingress.",
                    "default": false
                },
                "className": {
                    "type": "string",
                    "description": "Specify class name for Ingress.",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Specify additional annotations for ingress.",
                    "default": {}
                },
                "hosts": {
                    "type": "array",
                    "description": "Specify name of host.",
                    "items": {
                        "type": "object",
                        "properties": {
                            "host": {
                                "type": "string",
                                "description": "Specify name of host."
                            },
                            "paths": {
                                "type": "array",
                                "description": "Specify ingress path. ",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "path": {
                                            "type": "string",
                                            "description": "Specify ingress path. "
                                        },
                                        "pathType": {
                                            "type": "string",
                                            "description": "Specify path type."
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "tls": {
                    "type": "array",
                    "description": "Specify list of pairs of TLS `secretName` and hosts.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables `livenessProbe``",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "`LivenessProbe`` endpoint path",
                    "default": "/v1/health/live"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for `livenessProbe`",
                    "default": 15
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for `livenessProbe`",
                    "default": 1
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for `livenessProbe`",
                    "default": 10
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for `livenessProbe`",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for `livenessProbe`",
                    "default": 3
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables `readinessProbe`",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "Readiness Endpoint Path",
                    "default": "/v1/health/ready"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for `readinessProbe`",
                    "default": 15
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for `readinessProbe`",
                    "default": 1
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for `readinessProbe`",
                    "default": 10
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for `readinessProbe`",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for `readinessProbe`",
                    "default": 3
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables `startupProbe`",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "`StartupProbe` Endpoint Path",
                    "default": "/v1/health/ready"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for `startupProbe`",
                    "default": 40
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for `startupProbe`",
                    "default": 1
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for `startupProbe`",
                    "default": 10
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for `startupProbe`",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for `startupProbe`",
                    "default": 180
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "port": {
                    "type": "number",
                    "description": "For NIMs with a separate metrics port, this opens that port on the container",
                    "default": 0
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enables `serviceMonitor` creation.",
                            "default": false
                        }
                    }
                }
            }
        },
        "nim": {
            "type": "object",
            "properties": {
                "nimCache": {
                    "type": "string",
                    "description": "Path to mount writeable storage or pre-filled model cache for the NIM",
                    "default": "\"\""
                },
                "modelName": {
                    "type": "string",
                    "description": "Optionally specifies the name of the model in the API. This can be used in helm tests.",
                    "default": "\"\""
                },
                "ngcAPISecret": {
                    "type": "string",
                    "description": "Name of pre-existing secret with a key named `NGC_API_KEY` that contains an API key for NGC model downloads",
                    "default": "\"\""
                },
                "ngcAPIKey": {
                    "type": "string",
                    "description": "NGC API key literal to use as the API secret and image pull secret when set",
                    "default": "\"\""
                },
                "serverPort": {
                    "type": "number",
                    "description": "Specify Server Port, for LLM NIM.",
                    "default": 0
                },
                "httpPort": {
                    "type": "number",
                    "description": "Specify HTTP Port.",
                    "default": 8000
                },
                "grpcPort": {
                    "type": "number",
                    "description": "Specify GRPC Port.",
                    "default": 0
                },
                "jsonLogging": {
                    "type": "boolean",
                    "description": "Whether to enable JSON lines logging. Defaults to true.",
                    "default": true
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level of NIM service. Possible values of the variable are TRACE, DEBUG, INFO, WARNING, ERROR, CRITICAL.",
                    "default": "INFO"
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables the use of persistent volumes.",
                    "default": false
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Specifies an existing persistent volume claim. If using `existingClaim`, run only one replica or use a `ReadWriteMany` storage setup.",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specifies the persistent volume storage class. If set to `\"-\"`, this disables dynamic provisioning. If left undefined or set to null, the cluster default storage provisioner is used.",
                    "default": "",
                    "nullable": true
                },
                "accessMode": {
                    "type": "string",
                    "description": "Specify `accessMode`. If using an NFS or similar setup, you can use `ReadWriteMany`.",
                    "default": "ReadWriteOnce"
                },
                "stsPersistentVolumeClaimRetentionPolicy": {
                    "type": "object",
                    "properties": {
                        "whenDeleted": {
                            "type": "string",
                            "description": "Specifies persistent volume claim retention policy when deleted. Only used with Stateful Set volume templates.",
                            "default": "Retain"
                        },
                        "whenScaled": {
                            "type": "string",
                            "description": "Specifies persistent volume claim retention policy when scaled. Only used with Stateful Set volume templates.",
                            "default": "Retain"
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Specifies the size of the persistent volume claim (for example 40Gi).",
                    "default": "50Gi"
                }
            }
        },
        "hostPath": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable `hostPath`.",
                    "default": false
                },
                "path": {
                    "type": "string",
                    "description": "Specifies path on the node used as a `hostPath` volume. ",
                    "default": "/model-store"
                }
            }
        },
        "nfs": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable direct pod NFS mount",
                    "default": false
                },
                "path": {
                    "type": "string",
                    "description": "Specify path on NFS server to mount",
                    "default": "/exports"
                },
                "server": {
                    "type": "string",
                    "description": "Specify NFS server address",
                    "default": "nfs-server.example.com"
                },
                "readOnly": {
                    "type": "boolean",
                    "description": "Set to true to mount as read-only",
                    "default": false
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Specifies the service type for the deployment.",
                    "default": "ClusterIP"
                },
                "name": {
                    "type": "string",
                    "description": "Overrides the default service name",
                    "default": ""
                },
                "serverPort": {
                    "type": "number",
                    "description": "Specifies the Server Port for the service.",
                    "default": 0
                },
                "httpPort": {
                    "type": "number",
                    "description": "Specifies the HTTP Port for the service.",
                    "default": 8000
                },
                "grpcPort": {
                    "type": "number",
                    "description": "Specifies the GRPC Port for the service.",
                    "default": 0
                },
                "metricsPort": {
                    "type": "number",
                    "description": "Specifies the metrics port on the main service object. Some NIMs do not use a separate port.",
                    "default": 0
                }
            }
        }
    }
}
